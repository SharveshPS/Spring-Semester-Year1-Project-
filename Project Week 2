import cv2
import numpy as np
from picamera.array import PiRGBArray
from picamera import PiCamera
import RPi.GPIO as GPIO
import time

# Initialize GPIO for motor control
# Define GPIO pins for motor control
IN1 = 24
IN2 = 18
IN3 = 17
IN4 = 27
ENA = 25
ENB = 22

# Set up GPIO mode and pins
GPIO.setmode(GPIO.BCM)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)
GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)
GPIO.setup(ENA, GPIO.OUT)
GPIO.setup(ENB, GPIO.OUT)

# Initialize PWM for motor control
pwm_motor1 = GPIO.PWM(ENA, 100)  # Frequency: 100 Hz
pwm_motor2 = GPIO.PWM(ENB, 100)
pwm_motor1.start(0)
pwm_motor2.start(0)

# Define motor control functions
def move_forward(speed):
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    pwm_motor1.ChangeDutyCycle(speed)
    pwm_motor2.ChangeDutyCycle(speed)

def turn_left(speed):
    GPIO.output(IN1, GPIO.HIGH)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.HIGH)
    pwm_motor1.ChangeDutyCycle(63)
    pwm_motor2.ChangeDutyCycle(45)

def turn_right(speed):
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.HIGH)
    GPIO.output(IN3, GPIO.HIGH)
    GPIO.output(IN4, GPIO.LOW)
    pwm_motor1.ChangeDutyCycle(45)
    pwm_motor2.ChangeDutyCycle(63)

def stop():
    GPIO.output(IN1, GPIO.LOW)
    GPIO.output(IN2, GPIO.LOW)
    GPIO.output(IN3, GPIO.LOW)
    GPIO.output(IN4, GPIO.LOW)
    pwm_motor1.ChangeDutyCycle(0)
    pwm_motor2.ChangeDutyCycle(0)

# Function to detect black lines in a binary filtered image and adjust robot's movement
def detect_and_follow_black_line(binary_image):
    # Find contours
    contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Flag to check if black line is detected
    black_line_detected = False
    
    # If contours are found
    if contours:
        # Get the largest contour
        c = max(contours, key=cv2.contourArea)
        
        # Get centroid of the largest contour
        M = cv2.moments(c)
        if M["m00"] != 0:
            cx = int(M['m10'] / M['m00'])
            cy = int(M['m01'] / M['m00'])
            print("CX:", cx)
            
            # Adjust robot's movement based on the centroid
            if cx > 102 and cx < 160:  # Adjust this threshold for turning left
                turn_left(100)
                print("left")
            elif cx > 159 and cx<200:  # Adjust this threshold for turning right
                turn_right(100)
                print("right")
            else:
                move_forward(40)
                print("forward")
            
            # Set flag to True since a black line is detected
            black_line_detected = True
    
    # If no black line is detected, stop the robot
    if not black_line_detected:
        stop()

# Main function
def main():
    # Initialize the camera
    camera = PiCamera()
    camera.resolution = (320, 240)
    camera.framerate = 20
    rawCapture = PiRGBArray(camera, size=(320, 240))
    
    # Allow the camera to warm up
    time.sleep(0.1)

    for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
        # Grab the raw NumPy array representing the image
        original_image = frame.array.copy()

        # Convert the original image to grayscale
        gray_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

        # Thresholding to create binary image with white lines on black background
        _, binary_image = cv2.threshold(gray_image, 75, 255, cv2.THRESH_BINARY)

        # Detect black lines and adjust robot's movement
        detect_and_follow_black_line(binary_image)

        # Find contours on the original image
        contours, _ = cv2.findContours(binary_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        cv2.drawContours(original_image, contours, -1, (0, 255, 255), 2)

        # Display both images
        cv2.imshow("Original Image with Contours", original_image)
        cv2.imshow("Binary Filtered Image", binary_image)
        
        # Clear the stream in preparation for the next frame
        rawCapture.truncate(0)

        # Check for 'q' key press to exit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera resources
    cv2.destroyAllWindows()
    camera.close()

    # Stop the motors when program ends
    stop()

if __name__ == "__main__":
    main()
